{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "eccc2bbc-5fb0-40bf-b603-8c04cab40f40",
   "metadata": {},
   "source": [
    "## Group project members:\n",
    "Mohammad Amjad and 3 other group members"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "341bb6fc-f0a0-413e-9f00-33ea49fbdd9a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import glob\n",
    "import os\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "30cbda61-441f-45fe-8826-c31972ee1519",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resultant CSV after joining all CSV files at a particular location...\n",
      "  Birth Cohort education women potential wage  \\\n",
      "0         1950                       7.691996   \n",
      "1         1955                       7.685809   \n",
      "2         1960                       7.684305   \n",
      "3         1965                       7.680295   \n",
      "4         1970                       7.679204   \n",
      "\n",
      "  education women potential wage.1 psychology men potential wage  \\\n",
      "0                         7.655568                      7.705225   \n",
      "1                         7.653898                      7.706808   \n",
      "2                         7.650433                      7.705554   \n",
      "3                         7.647391                        7.7032   \n",
      "4                         7.647661                      7.703494   \n",
      "\n",
      "  psychology women potential wage fine arts men potential wage  \\\n",
      "0                         7.67243                     7.681736   \n",
      "1                        7.673829                     7.681033   \n",
      "2                        7.675113                      7.68366   \n",
      "3                        7.673352                     7.684316   \n",
      "4                        7.671083                     7.679753   \n",
      "\n",
      "   fine arts women potential wage  medical men potential wage  \\\n",
      "0                        7.668564                    7.686605   \n",
      "1                        7.670320                    7.687662   \n",
      "2                        7.671069                    7.679576   \n",
      "3                        7.675118                    7.679198   \n",
      "4                        7.672823                    7.676306   \n",
      "\n",
      "   medical women potential wage  languages men potential wage  ...  1960 1965  \\\n",
      "0                      7.650404                      7.705518  ...   NaN  NaN   \n",
      "1                      7.650433                      7.707172  ...   NaN  NaN   \n",
      "2                      7.648042                      7.702482  ...   NaN  NaN   \n",
      "3                      7.647120                      7.708946  ...   NaN  NaN   \n",
      "4                      7.645299                      7.713142  ...   NaN  NaN   \n",
      "\n",
      "  1970 1975 1980 1985  1990  major  Detailed Major  \\\n",
      "0  NaN  NaN  NaN  NaN   NaN    NaN             NaN   \n",
      "1  NaN  NaN  NaN  NaN   NaN    NaN             NaN   \n",
      "2  NaN  NaN  NaN  NaN   NaN    NaN             NaN   \n",
      "3  NaN  NaN  NaN  NaN   NaN    NaN             NaN   \n",
      "4  NaN  NaN  NaN  NaN   NaN    NaN             NaN   \n",
      "\n",
      "   Female-Male Mean Potential Ln Wage Occupation  \n",
      "0                                            NaN  \n",
      "1                                            NaN  \n",
      "2                                            NaN  \n",
      "3                                            NaN  \n",
      "4                                            NaN  \n",
      "\n",
      "[5 rows x 49 columns]\n"
     ]
    }
   ],
   "source": [
    "# Load and combine CSV files\n",
    "files2 = os.path.join(\"C:\\\\Users\\\\Abdus91\\\\Desktop\\\\Class group proj\\\\CSGP\", \"*.csv\")\n",
    "files2 = glob.glob(files2)\n",
    "\n",
    "print(\"Resultant CSV after joining all CSV files at a particular location...\")\n",
    "df2 = pd.concat(map(pd.read_csv, files2), ignore_index=True)\n",
    "print(df2.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3335df62-0890-4c1f-83a0-d55a1fcce250",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial NaN values per column:\n",
      "Birth Cohort                                     185\n",
      "education women potential wage                   213\n",
      "education women potential wage.1                 213\n",
      "psychology men potential wage                    213\n",
      "psychology women potential wage                  213\n",
      "fine arts men potential wage                     213\n",
      "fine arts women potential wage                   223\n",
      "medical men potential wage                       223\n",
      "medical women potential wage                     223\n",
      "languages men potential wage                     223\n",
      "languages women potential wage                   223\n",
      "engineering men potential wage                   213\n",
      "engineering women potential wage                 213\n",
      "biology men potential wage                       213\n",
      "biology women potential wage                     213\n",
      "physical sciences men potential wage             213\n",
      "physical sciences women potential wage           223\n",
      "business men potential wage                      223\n",
      "business women potential wage                    223\n",
      "history men potential wage                       223\n",
      "history women potential wage                     223\n",
      "Five Year Birth Cohort                           220\n",
      "1                                                218\n",
      "2                                                218\n",
      "3                                                218\n",
      "4                                                218\n",
      "5                                                218\n",
      "6                                                218\n",
      "7                                                218\n",
      "8                                                218\n",
      "9                                                218\n",
      "10                                               218\n",
      "Classic DD Major                                 223\n",
      "Classic DD Occupation                            223\n",
      "Inverse DD Major                                 223\n",
      "Inverse DD Occupation                            223\n",
      "Unnamed: 0                                       228\n",
      "1950                                             228\n",
      "1955                                             228\n",
      "1960                                             228\n",
      "1965                                             228\n",
      "1970                                             228\n",
      "1975                                             228\n",
      "1980                                             228\n",
      "1985                                             228\n",
      "1990                                             228\n",
      "major                                             96\n",
      "Detailed Major                                    96\n",
      "Female-Male Mean Potential Ln Wage Occupation     96\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check initial NaN values\n",
    "print(\"Initial NaN values per column:\")\n",
    "print(df2.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "319c25b1-0c8e-4446-8a65-44f9f154e2b8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define columns for conversion to numeric\n",
    "convcolns = [\n",
    "    'Birth Cohort', 'education women potential wage',\n",
    "    'psychology women potential wage', 'fine arts women potential wage', 'medical women potential wage',\n",
    "    'languages women potential wage', 'engineering women potential wage', 'biology women potential wage',\n",
    "    'physical sciences women potential wage', 'business women potential wage', 'history women potential wage',\n",
    "    'Female-Male Mean Potential Ln Wage Occupation'\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b6e2e3ac-3044-49f3-bd62-f12758163a7e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Convert specified columns to numeric\n",
    "for coln3 in convcolns:\n",
    "    if coln3 in df2.columns:\n",
    "        df2[coln3] = pd.to_numeric(df2[coln3], errors='coerce')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b9f89259-5d38-406e-9516-255ccb844b71",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fill NaNs for numeric columns with mean\n",
    "for col in df2.select_dtypes(include=[np.number]).columns:\n",
    "    df2[col].fillna(df2[col].mean(), inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "34ff8608-b37d-4b23-8169-e03360692f66",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data types of columns:\n",
      "Birth Cohort                                     float64\n",
      "education women potential wage                   float64\n",
      "education women potential wage.1                  object\n",
      "psychology men potential wage                     object\n",
      "psychology women potential wage                  float64\n",
      "fine arts men potential wage                      object\n",
      "fine arts women potential wage                   float64\n",
      "medical men potential wage                       float64\n",
      "medical women potential wage                     float64\n",
      "languages men potential wage                     float64\n",
      "languages women potential wage                   float64\n",
      "engineering men potential wage                    object\n",
      "engineering women potential wage                 float64\n",
      "biology men potential wage                        object\n",
      "biology women potential wage                     float64\n",
      "physical sciences men potential wage              object\n",
      "physical sciences women potential wage           float64\n",
      "business men potential wage                      float64\n",
      "business women potential wage                    float64\n",
      "history men potential wage                       float64\n",
      "history women potential wage                     float64\n",
      "Five Year Birth Cohort                            object\n",
      "1                                                float64\n",
      "2                                                float64\n",
      "3                                                float64\n",
      "4                                                float64\n",
      "5                                                float64\n",
      "6                                                float64\n",
      "7                                                float64\n",
      "8                                                float64\n",
      "9                                                float64\n",
      "10                                               float64\n",
      "Classic DD Major                                 float64\n",
      "Classic DD Occupation                            float64\n",
      "Inverse DD Major                                 float64\n",
      "Inverse DD Occupation                            float64\n",
      "Unnamed: 0                                        object\n",
      "1950                                             float64\n",
      "1955                                             float64\n",
      "1960                                             float64\n",
      "1965                                             float64\n",
      "1970                                             float64\n",
      "1975                                             float64\n",
      "1980                                             float64\n",
      "1985                                             float64\n",
      "1990                                             float64\n",
      "major                                             object\n",
      "Detailed Major                                    object\n",
      "Female-Male Mean Potential Ln Wage Occupation    float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Fill NaNs for object columns with mode\n",
    "for col in df2.select_dtypes(include=['object']).columns:\n",
    "    if not df2[col].mode().empty:\n",
    "        df2[col].fillna(df2[col].mode()[0], inplace=True)\n",
    "\n",
    "# Check data types\n",
    "print(\"Data types of columns:\")\n",
    "print(df2.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5e97e6c1-e473-403a-b689-2ec449c89011",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimensions after ensuring all columns are numeric: (232, 49)\n"
     ]
    }
   ],
   "source": [
    "# Ensure all columns are numeric\n",
    "for col in df2.columns:\n",
    "    df2[col] = pd.to_numeric(df2[col], errors='coerce')\n",
    "\n",
    "# Remove any remaining non-numeric columns\n",
    "df2 = df2.select_dtypes(include=[np.number])\n",
    "print(\"Dimensions after ensuring all columns are numeric:\", df2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "109ad998-8e05-460c-9683-ccc886a0b007",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Check for Inf values and replace them with NaNs\n",
    "df2.replace([np.inf, -np.inf], np.nan, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7feed255-81aa-4665-8781-616be388a6d8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimensions after replacing Infs and dropping remaining NaNs in dependent variable: (232, 49)\n"
     ]
    }
   ],
   "source": [
    "# Drop rows with NaNs in the dependent variable only\n",
    "df2 = df2.dropna(subset=['Female-Male Mean Potential Ln Wage Occupation'])\n",
    "print(\"Dimensions after replacing Infs and dropping remaining NaNs in dependent variable:\", df2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "95a2033c-17e8-4103-8a89-fe54aea6a416",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking for NaNs and Infs in the independent variables...\n",
      "Birth Cohort                                       0\n",
      "education women potential wage                     0\n",
      "education women potential wage.1                   0\n",
      "psychology men potential wage                      0\n",
      "psychology women potential wage                    0\n",
      "fine arts men potential wage                       0\n",
      "fine arts women potential wage                     0\n",
      "medical men potential wage                         0\n",
      "medical women potential wage                       0\n",
      "languages men potential wage                       0\n",
      "languages women potential wage                     0\n",
      "engineering men potential wage                     0\n",
      "engineering women potential wage                   0\n",
      "biology men potential wage                         0\n",
      "biology women potential wage                       0\n",
      "physical sciences men potential wage               0\n",
      "physical sciences women potential wage             0\n",
      "business men potential wage                        0\n",
      "business women potential wage                      0\n",
      "history men potential wage                         0\n",
      "history women potential wage                       0\n",
      "Five Year Birth Cohort                           232\n",
      "1                                                  0\n",
      "2                                                  0\n",
      "3                                                  0\n",
      "4                                                  0\n",
      "5                                                  0\n",
      "6                                                  0\n",
      "7                                                  0\n",
      "8                                                  0\n",
      "9                                                  0\n",
      "10                                                 0\n",
      "Classic DD Major                                   0\n",
      "Classic DD Occupation                              0\n",
      "Inverse DD Major                                   0\n",
      "Inverse DD Occupation                              0\n",
      "Unnamed: 0                                       232\n",
      "1950                                               0\n",
      "1955                                               0\n",
      "1960                                               0\n",
      "1965                                               0\n",
      "1970                                               0\n",
      "1975                                               0\n",
      "1980                                               0\n",
      "1985                                               0\n",
      "1990                                               0\n",
      "major                                              0\n",
      "Detailed Major                                   232\n",
      "Female-Male Mean Potential Ln Wage Occupation      0\n",
      "dtype: int64\n",
      "Dimensions after dropping columns with NaNs: (232, 46)\n"
     ]
    }
   ],
   "source": [
    "# Fill any remaining NaNs with column means\n",
    "df2.fillna(df2.mean(), inplace=True)\n",
    "\n",
    "# Check if there are any NaNs or Infs left in the independent variables\n",
    "print(\"Checking for NaNs and Infs in the independent variables...\")\n",
    "print(df2.isnull().sum())\n",
    "\n",
    "# Drop columns that still contain NaNs after preprocessing\n",
    "df2 = df2.dropna(axis=1)\n",
    "print(\"Dimensions after dropping columns with NaNs:\", df2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e4c4fddd-9017-47ef-ac57-8f0de52c46ea",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                          OLS Regression Results                                         \n",
      "=========================================================================================================\n",
      "Dep. Variable:     Female-Male Mean Potential Ln Wage Occupation   R-squared:                       0.041\n",
      "Model:                                                       OLS   Adj. R-squared:                 -0.136\n",
      "Method:                                            Least Squares   F-statistic:                    0.2305\n",
      "Date:                                           Tue, 01 Oct 2024   Prob (F-statistic):               1.00\n",
      "Time:                                                   19:55:15   Log-Likelihood:                 428.71\n",
      "No. Observations:                                            232   AIC:                            -783.4\n",
      "Df Residuals:                                                195   BIC:                            -655.9\n",
      "Df Model:                                                     36                                         \n",
      "Covariance Type:                                       nonrobust                                         \n",
      "==========================================================================================================\n",
      "                                             coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------------\n",
      "const                                     -0.0268     76.391     -0.000      1.000    -150.685     150.632\n",
      "Birth Cohort                            3.304e-16      0.001   2.88e-13      1.000      -0.002       0.002\n",
      "education women potential wage         -1.367e-12      5.015  -2.73e-13      1.000      -9.890       9.890\n",
      "education women potential wage.1       -9.623e-12      5.457  -1.76e-12      1.000     -10.762      10.762\n",
      "psychology men potential wage           5.248e-12      4.146   1.27e-12      1.000      -8.176       8.176\n",
      "psychology women potential wage         1.377e-12      5.013   2.75e-13      1.000      -9.886       9.886\n",
      "fine arts men potential wage            4.333e-12      3.328    1.3e-12      1.000      -6.564       6.564\n",
      "fine arts women potential wage         -3.438e-12     11.246  -3.06e-13      1.000     -22.180      22.180\n",
      "medical men potential wage              5.196e-11     16.219    3.2e-12      1.000     -31.986      31.986\n",
      "medical women potential wage           -9.648e-11     28.468  -3.39e-12      1.000     -56.144      56.144\n",
      "languages men potential wage           -4.818e-13      3.497  -1.38e-13      1.000      -6.897       6.897\n",
      "languages women potential wage         -1.262e-11      7.296  -1.73e-12      1.000     -14.389      14.389\n",
      "engineering men potential wage         -3.629e-12      4.118  -8.81e-13      1.000      -8.121       8.121\n",
      "engineering women potential wage        2.108e-12      3.701    5.7e-13      1.000      -7.300       7.300\n",
      "biology men potential wage              7.476e-12      4.333   1.73e-12      1.000      -8.545       8.545\n",
      "biology women potential wage           -2.106e-12      3.701  -5.69e-13      1.000      -7.298       7.298\n",
      "physical sciences men potential wage   -3.882e-12      3.317  -1.17e-12      1.000      -6.542       6.542\n",
      "physical sciences women potential wage  9.579e-12      7.884   1.21e-12      1.000     -15.550      15.550\n",
      "business men potential wage            -4.783e-12      8.184  -5.84e-13      1.000     -16.140      16.140\n",
      "business women potential wage          -3.996e-11     14.163  -2.82e-12      1.000     -27.933      27.933\n",
      "history men potential wage             -1.536e-11      7.697     -2e-12      1.000     -15.180      15.180\n",
      "history women potential wage            1.207e-11      5.417   2.23e-12      1.000     -10.684      10.684\n",
      "1                                       2.114e-13     14.499   1.46e-14      1.000     -28.595      28.595\n",
      "2                                      -4.974e-14      9.604  -5.18e-15      1.000     -18.941      18.941\n",
      "3                                       6.306e-14     15.849   3.98e-15      1.000     -31.257      31.257\n",
      "4                                       -6.75e-13     13.688  -4.93e-14      1.000     -26.996      26.996\n",
      "5                                       8.349e-14     11.333   7.37e-15      1.000     -22.351      22.351\n",
      "6                                       3.109e-13      5.377   5.78e-14      1.000     -10.604      10.604\n",
      "7                                       2.887e-13     11.643   2.48e-14      1.000     -22.963      22.963\n",
      "8                                       -3.18e-13     12.645  -2.51e-14      1.000     -24.939      24.939\n",
      "9                                       1.754e-13      2.070   8.48e-14      1.000      -4.082       4.082\n",
      "10                                     -9.681e-14      4.907  -1.97e-14      1.000      -9.678       9.678\n",
      "Classic DD Major                          -0.0134     38.194     -0.000      1.000     -75.340      75.313\n",
      "Classic DD Occupation                     -0.0134     38.216     -0.000      1.000     -75.382      75.355\n",
      "Inverse DD Major                          -0.0134     38.199     -0.000      1.000     -75.349      75.322\n",
      "Inverse DD Occupation                     -0.0134     38.181     -0.000      1.000     -75.314      75.288\n",
      "1950                                       0.0002      4.565   4.98e-05      1.000      -9.003       9.004\n",
      "1955                                       0.0001     10.764   9.49e-06      1.000     -21.230      21.230\n",
      "1960                                    -3.87e-05      8.006  -4.83e-06      1.000     -15.789      15.789\n",
      "1965                                   -3.432e-05      3.187  -1.08e-05      1.000      -6.285       6.285\n",
      "1970                                   -4.142e-05      1.893  -2.19e-05      1.000      -3.733       3.733\n",
      "1975                                   -1.318e-05      6.211  -2.12e-06      1.000     -12.250      12.250\n",
      "1980                                   -2.606e-05      7.270  -3.58e-06      1.000     -14.338      14.338\n",
      "1985                                   -6.928e-05      0.914  -7.58e-05      1.000      -1.803       1.803\n",
      "1990                                      -0.0002      2.179  -7.54e-05      1.000      -4.297       4.297\n",
      "major                                  -6.089e-06   2.11e-06     -2.881      0.004   -1.03e-05   -1.92e-06\n",
      "==============================================================================\n",
      "Omnibus:                       23.386   Durbin-Watson:                   0.185\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               74.581\n",
      "Skew:                          -0.318   Prob(JB):                     6.38e-17\n",
      "Kurtosis:                       5.704   Cond. No.                     1.04e+16\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The smallest eigenvalue is 4.35e-23. This might indicate that there are\n",
      "strong multicollinearity problems or that the design matrix is singular.\n",
      "Final DataFrame dimensions:\n",
      "(232, 46)\n"
     ]
    }
   ],
   "source": [
    "# Ensure there is enough data to perform regression\n",
    "if df2.empty:\n",
    "    print(\"DataFrame is empty after preprocessing. Please check the data and preprocessing steps.\")\n",
    "else:\n",
    "    # Define dependent and independent variables\n",
    "    y = df2['Female-Male Mean Potential Ln Wage Occupation']\n",
    "    X = df2.drop(columns=['Female-Male Mean Potential Ln Wage Occupation'])\n",
    "\n",
    "    # Add constant to independent variables\n",
    "    X = sm.add_constant(X)\n",
    "\n",
    "    # Fit the regression model\n",
    "    try:\n",
    "        model1 = sm.OLS(y, X).fit()\n",
    "        summary = model1.summary()\n",
    "        print(summary)\n",
    "    except Exception as e:\n",
    "        print(f\"Error fitting the model: {e}\")\n",
    "\n",
    "# Check final DataFrame dimensions\n",
    "print(\"Final DataFrame dimensions:\")\n",
    "print(df2.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1e5301b-dd36-4fc1-86bf-663cfe3b68a2",
   "metadata": {},
   "source": [
    "## Sources:\n",
    "1) https://www.geeksforgeeks.org/python-os-path-join-method/\n",
    "2) https://www.tutorialspoint.com/how-to-merge-all-csv-files-into-a-single-dataframe-python-pandas\n",
    "3) https://www.tutorialspoint.com/python/os_getcwd.htm\n",
    "4) https://stackoverflow.com/questions/41681693/pandas-isnull-sum-with-column-headers\n",
    "5) https://sentry.io/answers/change-a-column-type-in-a-dataframe-in-python-pandas/#:~:text=If%20we%20want%20to%20convert%20a%20column%20to%20a%20sensible,should%20use%20the%20convert_dtypes%20method.\n",
    "6) https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html\n",
    "7) https://www.geeksforgeeks.org/loop-or-iterate-over-all-or-certain-columns-of-a-dataframe-in-python-pandas/\n",
    "8) https://stackoverflow.com/questions/24870306/how-to-check-if-a-column-exists-in-pandas\n",
    "9) https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dtypes.html\n",
    "10) https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.select_dtypes.html\n",
    "11) https://www.geeksforgeeks.org/how-to-fill-nan-values-with-mean-in-pandas/\n",
    "12) https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html\n",
    "13) https://stackoverflow.com/questions/18689823/pandas-dataframe-replace-nan-values-with-average-of-columns\n",
    "14) https://stackoverflow.com/questions/21271581/selecting-pandas-columns-by-dtype\n",
    "15) https://stackoverflow.com/questions/36543606/python-pandas-check-if-dataframe-is-not-empty\n",
    "16) https://www.statology.org/pandas-fillna-with-mode/\n",
    "17) https://stackoverflow.com/questions/42789324/how-to-pandas-fillna-with-mode-of-column\n",
    "18) https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.shape.html\n",
    "19) https://www.geeksforgeeks.org/check-if-dataframe-contains-infinity-in-python-pandas/\n",
    "20) https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.replace.html\n",
    "21) https://stackoverflow.com/questions/66922511/replace-all-inf-inf-values-with-nan-in-a-pandas-dataframe\n",
    "22) https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html\n",
    "23) https://www.geeksforgeeks.org/how-to-drop-rows-with-nan-values-in-pandas-dataframe/\n",
    "24) https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html\n",
    "25) https://stackoverflow.com/questions/19828822/how-do-i-check-if-a-pandas-dataframe-is-empty\n",
    "26) https://www.aporia.com/resources/how-to/check-if-dataframe-is-empty/#:~:text=We%20can%20use%20the%20empty,if%20the%20DataFrame%20is%20empty.\n",
    "27) https://stackoverflow.com/questions/39337115/testing-if-a-pandas-dataframe-exists\n",
    "28) https://www.statsmodels.org/dev/generated/statsmodels.regression.linear_model.OLS.html\n",
    "29) https://www.datarobot.com/blog/ordinary-least-squares-in-python/\n",
    "30) https://stackoverflow.com/questions/19991445/run-an-ols-regression-with-pandas-data-frame\n",
    "31) https://docs.python.org/3/tutorial/errors.html\n",
    "32) https://stackoverflow.com/questions/73139129/try-and-except-in-pandas-operations-how-to-do-it\n",
    "33) https://www.geeksforgeeks.org/ordinary-least-squares-ols-using-statsmodels/\n",
    "34) https://www.freecodecamp.org/news/python-print-exception-how-to-try-except-print-an-error/\n",
    "35) https://stackoverflow.com/questions/1483429/how-do-i-print-an-exception-in-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9501e536-6aa8-4b4a-bc1f-28d18fdd502e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
